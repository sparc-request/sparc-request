-# Copyright Â© 2011 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- permission = protocol_role.can_edit?
- pi_count_var = protocol.principal_investigators.size
- billing_manager_count_var = protocol.billing_managers.size
%input{:type => 'hidden', :value => "#{pi_count_var}", :id => "pi_count_#{protocol.id}"}
%input{:type => 'hidden', :value => "#{billing_manager_count_var}", :id => "billing_manager_count_#{protocol.id}"}
.protocol-information-title.ui-corner-top= t(:protocol_information)[:information]
.protocol-information-body.ui-corner-bottom
  .info_left
    %ul
      %li
        = "#{protocol.type.capitalize} ID:"
        = protocol.try(:id)
      %li
        = t(:protocol_information)[:title]
        = protocol.try(:title)
      %li
        = t(:protocol_information)[:short_title]
        = protocol.try(:short_title)
      - if protocol.type == 'Study'
        %li
          = t(:protocol_information)[:sponsor]
          = protocol.try(:sponsor_name)
      %li
        = display_funding_source(protocol)
  .info_right
    .protocol-information-button.ui-corner-all{:'data-permission' => permission.to_s, :'data-protocol_id' => protocol.id}
      = "EDIT #{protocol.type.capitalize} Information"
  .clear
#spacer

%br
.protocol-information-title.ui-corner-top= t(:protocol_information)[:authorized_users]
.protocol-information-table
  %table{:width => "100%"}
    %tr
      %th= t(:protocol_information)[:name]
      %th= t(:protocol_information)[:role]
      %th= t(:protocol_information)[:proxy]
      %th{:colspan => 2}= t(:protocol_information)[:actions]
    - protocol.project_roles.each do |pr|
      - u = pr.identity
      %tr{data: {"user-id" => pr.identity.id}}
        %td
          = u.first_name
          = u.last_name
        %td= USER_ROLES.detect{|k,v| v == pr.role}.first
        %td= PROXY_RIGHTS.key(pr.project_rights)
        %td.no_background
          %a.edit-associated-user-button{:href => "javascript:void(0)", :title => "Edit Authorized User", :'data-protocol_id' => protocol.id, :'data-user_id' => u.id, :'data-permission' => permission.to_s, :'data-pr_id' => pr.id}
        %td.no_background
          %a.delete-associated-user-button{:href => "javascript:void(0)", :title => "Delete Authorized User", :style => 'font-size:10px', :'data-protocol_id' => protocol.id, :'data-current_user_role' => pr.role, :'data-pr_id' => pr.id, :'data-user_id' => u.id, :'data-user_role' => pr.role, :'data-permission' => permission.to_s}


    - if protocol.project_roles.count == 0
      = t(:protocol_information)[:no_authorized_users]

.associated-user-button{:'data-protocol_id' => protocol.id, :'data-permission' => permission.to_s}
  = t(:protocol_information)[:add_authorized_user]

%br


.service-request-title.ui-corner-top= t(:protocol_information)[:service_requests]
.service_request-body
  %table.list{:style => 'font-size:12px;', :width => "845px;"}
    %tr{:style => 'width:100%'}
      %th{:style => 'width:15%'}= t(:protocol_information)[:srid]
      %th{:style => 'width:15%'}= t(:protocol_information)[:date]
      %th{:style => 'width:15%'}= t(:protocol_information)[:provider]
      %th{:style => 'width:15%'}= t(:protocol_information)[:program]
      %th{:style => 'width:8%'}= t(:protocol_information)[:status]
      %th
      %th
      %th
      %th

    - protocol.service_requests.each do |sr|
      - first_ssr = true
      - css_class = cycle('odd', 'even', :name => 'protocol')
      - sr.sub_service_requests.each do |ssr|
        - next if ssr.status == 'first_draft'
        %tr.service_request.center{:class => css_class}
          %td
            = pretty_ssr_id(protocol, ssr)
          %td
            = sr.submitted_at.to_date.strftime('%m/%d/%Y') rescue ''
          %td
            = ssr.organization.name
          %td
            = pretty_program_core(ssr)
          %td
            = AVAILABLE_STATUSES[ssr.status]
          %td.no_background
            %center
              %a.new-portal-notification-button{:title => "Send Notifications", :'data-ssr_id' => ssr.ssr_id.to_s, :'data-sr_id' => sr.id}
          %td.no_background
            %center
              %a.view-sub-service-request-button{:title => "View Sub Service Request", :href => "javascript:void(0);", :'data-service_request_id' => ssr.service_request.id, :'data-protocol_id' => protocol.id, :'data-status' => ssr.status, :'data-ssr_id' => ssr.ssr_id.to_s}
          %td.no_background.edit-td
            - if @user.can_edit_sub_service_request? ssr
              %center
                %a.edit_service_request{:href => "javascript:void(0);", :'data-permission' => permission.to_s, :'data-url' => "/service_requests/#{sr.id}/catalog?sub_service_request_id=#{ssr.id}&from_user_portal=true"}= t(:protocol_information)[:edit]
          - if sr.sub_service_requests.size > 0 && first_ssr
            - first_ssr = false
            %td.no_background.edit-original-td
              - if @user.can_edit_service_request? sr
                %a.edit_service_request{:href => "javascript:void(0);", :'data-permission' => permission.to_s, :'data-url' => "/service_requests/#{sr.id}/catalog?from_user_portal=true&edit_original=true"}= t(:protocol_information)[:edit_original]
        %tr
          %td.notification_td{:colspan => "9"}
            %div{:style => "display:none;", :id => "portal_notifications_#{ssr.ssr_id.to_s}_#{sr.id}", :class => "portal_notifications"}
              = render :partial => 'portal/sub_service_requests/notifications_area', :locals => {:service_request => sr, :protocol => protocol, :sub_service_request => ssr}

    - reset_cycle('protocol')
%table
  %tr
    %td
      %a.add-services-button{:href => permission ? root_path(:protocol_id => protocol.id) : "javascript:void(0);", :'data-permission' => permission.to_s}= t(:protocol_information)[:add_services]
    %td
      %a.view-full-calendar-button{:href => "javascript:void(0);", :'data-protocol_id' => protocol.id, :'data-url' => "/portal/protocols/#{protocol.id}/view_full_calendar"}= t(:protocol_information)[:full_calendar]
