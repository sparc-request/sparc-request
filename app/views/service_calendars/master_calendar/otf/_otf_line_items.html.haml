-# Copyright Â© 2011 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%tr.section_header

  - if merged # display merged calendar otf line items
    %th{ colspan: 13 }= t(:calendar_page)[:headers][:other_services]

    - protocol.service_requests.each do |service_request|
      - if %w('first_draft' 'draft').include?(service_request.status)
        - next if portal
        - next if service_request != current_request
      - service_request.service_list(true).each do |_, value| # get only one time fee services
        - value[:line_items].each do |line_item|
          %tr.line_item.otfs{ :"data-unit_factor" => line_item.service.displayed_pricing_map.unit_factor }
            %td.service_name
              = line_item.service.name
            - unless portal || study_tracker
              %td.service_rate{ class: "service_rate_#{line_item.id}" }= display_service_rate line_item
            %td.your_cost{ :"data-your_cost" => line_item.applicable_rate }= display_your_cost line_item
            - unless portal || study_tracker
              - if line_item.service.try(:displayed_pricing_map).otf_unit_type == 'N/A'
                %td
                %td
                %td.units_per_quantity.center.width-50
                  = line_item.quantity
                %td= line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
              - else
                %td.line_item_quantity.center= line_item.units_per_quantity
                %td= line_item.service.try(:displayed_pricing_map).try(:otf_unit_type).try(:humanize)
                %td.units_per_quantity.center.width-50
                  %span.padding-right-5 /
                  = line_item.quantity
                %td= line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
            %td{ colspan: (portal || study_tracker) ? 7 : 5 }
            %td{ class: "otf_total total_#{line_item.id}" }= display_one_time_fee_direct_cost line_item


  - elsif review # display review calendar otf line items
    %tr.section_header
      %th{ colspan: portal ? 11 : 12 }= t(:calendar_page)[:headers][:other_services]
    - service_request.service_list(true).each do |_, value| # get only one time fee services and group them
      - next unless sub_service_request.nil? || sub_service_request.organization.name == value[:process_ssr_organization_name]
      %tr.sub_section_header
        %th{ colspan: 9 }= value[:name]
        - value[:line_items].each do |line_item|
          %tr.line_item
            %td.service_name= line_item.service.name
            %td.your_cost= display_your_cost line_item
            %td{ colspan: 6 }
            %td= display_one_time_fee_direct_cost line_item


  - elsif study_tracker # display study tracker calendar otf line items
    %th{ colspan: 6 }
      = t(:calendar_page)[:headers][:other_services]

      #nan_error
        = t(:service_requests)[:detail_list][:nan]

      #one_time_fee_errors
        = t(:service_requests)[:detail_list][:text1]
        %span#quantity
        = t(:service_requests)[:detail_list][:text2]
        %span#unit_minimum
        %br
        = t(:service_requests)[:detail_list][:text3]

      #unit_max_error
        = t(:service_requests)[:detail_list][:text4]
        %span#unit_quantity
        = t(:service_requests)[:detail_list][:text5]
        %span#unit_max
        %br
        = t(:service_requests)[:detail_list][:text6]

    - sub_service_request.one_time_fee_line_items.each do |line_item|
      %tr.sub_section_header
        %tr.line_item.otfs{ :"data-unit_factor" => line_item.service.displayed_pricing_map.unit_factor }
          %td.service_name
            = line_item.service.name
            = hidden_field_tag "service_request[line_items_attributes][#{line_item.id}][id]", line_item.id
          - if line_item.service.try(:displayed_pricing_map).otf_unit_type == 'N/A'
            %td
            %td
            %td.white-space-overflow
              = text_field_tag 'quantity', line_item.quantity, :unit_minimum => line_item.service.displayed_pricing_map.unit_minimum, :class => 'line_item_quantity', :"data-line_item_id" => line_item.id, :"data-study_tracker" => true, :current_quantity => line_item.quantity
            %td= line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
          - else
            %td= text_field_tag 'units_per_quantity', line_item.units_per_quantity, :"data-qty_max" => line_item.service.displayed_pricing_map.units_per_qty_max, :class => 'units_per_quantity', :"data-line_item_id" => line_item.id, :"data-study_tracker" => true, :current_units_per_quantity => line_item.units_per_quantity
            %td= line_item.service.try(:displayed_pricing_map).try(:otf_unit_type).try(:humanize)
            %td.white-space-overflow
              %span.padding-right-5.padding-left-2 /
              = text_field_tag 'quantity', line_item.quantity, :unit_minimum => line_item.service.displayed_pricing_map.unit_minimum, :class => 'line_item_quantity', :"data-line_item_id" => line_item.id, :"data-study_tracker" => true, :current_quantity => line_item.quantity
            %td= line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
          %td= link_to(image_tag('dashboard/cancel.png'), 'javascript:void(0);', :'data-line_item_id' => line_item.id, :'data-has_fulfillments' => one_time_fee_fulfillments?(line_item.id), :class => 'cwf_delete_data')


  - else # display default calendar otf line items
    %th{ colspan: 14 }
      = t(:calendar_page)[:headers][:other_services]

      #nan_error
        = t(:service_requests)[:detail_list][:nan]

      #one_time_fee_errors
        = t(:service_requests)[:detail_list][:text1]
        %span#quantity
        = t(:service_requests)[:detail_list][:text2]
        %span#unit_minimum
        %br
        = t(:service_requests)[:detail_list][:text3]

      #unit_max_error
        = t(:service_requests)[:detail_list][:text4]
        %span#unit_quantity
        = t(:service_requests)[:detail_list][:text5]
        %span#unit_max
        %br
        = t(:service_requests)[:detail_list][:text6]

    - service_request.service_list(true).each do |_, value| # get only one time fee services and group them
      - next unless sub_service_request.nil? || sub_service_request.organization.name == value[:process_ssr_organization_name]
      %tr.sub_section_header
        %th.otf{ colspan: (study_tracker) ? 13 : 14 }= value[:name]
        - value[:line_items].each do |line_item|
          %tr.line_item.otfs{ :"data-unit_factor" => line_item.service.displayed_pricing_map.unit_factor }
            %td.service_name
              = line_item.service.name
              - unless tab == 'calendar'
                = hidden_field_tag "service_request[line_items_attributes][#{line_item.id}][id]", line_item.id
            %td.service_rate{ class: "service_rate_#{line_item.id}" }= display_service_rate line_item
            %td.your_cost{ :"data-your_cost" => line_item.applicable_rate }= display_your_cost line_item
            - if tab == 'calendar'
              - if line_item.service.try(:displayed_pricing_map).otf_unit_type == 'N/A'
                %td
                %td
                %td.units_per_quantity.center.width-50
                  = line_item.quantity
                %td= line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
              - else
                %td.line_item_quantity.center= line_item.units_per_quantity
                %td= line_item.service.try(:displayed_pricing_map).try(:otf_unit_type).try(:humanize)
                %td.units_per_quantity.center.width-50
                  %span.padding-right-5 /
                  = line_item.quantity
                %td= line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
            - else
              - if line_item.service.try(:displayed_pricing_map).otf_unit_type == 'N/A'
                %td= line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
                %td.width-50
                  = text_field_tag "service_request[line_items_attributes][#{line_item.id}][quantity]", line_item.quantity, |
                   unit_minimum: line_item.service.displayed_pricing_map.quantity_minimum, class: 'line_item_quantity', current_quantity: line_item.quantity, previous_quantity: line_item.quantity, |
                   update: update_otf_qty_and_units_per_qty_service_request_service_calendars_path(service_request, line_item_id: line_item.id, type: 'qty') |
                %td
                %td
              - else
                %td{ colspan: 2 }
                  %span
                    = line_item.service.try(:displayed_pricing_map).try(:otf_unit_type).try(:humanize)
                    = text_field_tag "service_request[line_items_attributes][#{line_item.id}][units_per_quantity]", line_item.units_per_quantity, |
                     'data-qty_max' => line_item.service.displayed_pricing_map.units_per_qty_max, class: 'units_per_quantity', current_units_per_quantity: line_item.units_per_quantity, |
                     update: update_otf_qty_and_units_per_qty_service_request_service_calendars_path(service_request, line_item_id: line_item.id, type: 'units_per_qty') |
                %td{ colspan: 2 }
                  %span
                    = line_item.service.try(:displayed_pricing_map).try(:quantity_type).try(:humanize)
                    = text_field_tag "service_request[line_items_attributes][#{line_item.id}][quantity]", line_item.quantity, |
                     unit_minimum:  line_item.service.displayed_pricing_map.quantity_minimum, class: 'line_item_quantity', current_quantity: line_item.quantity, previous_quantity: line_item.quantity, |
                     update: update_otf_qty_and_units_per_qty_service_request_service_calendars_path(service_request, line_item_id: line_item.id, type: 'qty') |
            %td{ colspan: 5 }
            %td{ class: "otf_total total_#{line_item.id}" }= display_one_time_fee_direct_cost line_item
