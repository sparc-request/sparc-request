# Copyright Â© 2011 MUSC Foundation for Research Development
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
xlsx_package.use_shared_strings = true

wb = xlsx_package.workbook
default = wb.styles.add_style alignment: { horizontal: :left }
centered = wb.styles.add_style alignment: { horizontal: :center }
bordered = wb.styles.add_style :border=> {:style => :thin, :color => "00000000"}
wrap_bordered = wb.styles.add_style :border=> {:style => :thin, :color => "00000000"}, alignment: { wrap_text: true }
centered_bordered = wb.styles.add_style :border => {:style => :thin, :color => "00000000"}, :alignment => {:horizontal => :center}
rt_hdr_even_style = wb.styles.add_style bg_color: 'E8E8E8', :alignment => {:horizontal => :center}
rt_hdr_odd_style = wb.styles.add_style :alignment => {:horizontal => :center}
rt_even_style = wb.styles.add_style bg_color: 'E8E8E8', :border => {:style => :thin, :color => "00000000"}, :alignment => {:horizontal => :center}
rt_odd_style = wb.styles.add_style :border => {:style => :thin, :color => "00000000"}, :alignment => {:horizontal => :center}
row_header_style = wb.styles.add_style b: true
wrapped_row_header_style = wb.styles.add_style b: true, alignment: { wrap_text: true }
header_style = wb.styles.add_style sz: 12, b: true, bg_color: '0099FF', fg_color: 'FFFFFF', alignment: { horizontal: :left }
header_centered_style = wb.styles.add_style sz: 12, b: true, bg_color: '0099FF', fg_color: 'FFFFFF', alignment: { horizontal: :center, wrap_text: true }
sub_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'E8E8E8', alignment: { horizontal: :left }
name_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'ADADAD', alignment: { horizontal: :left }
visit_day_style = wb.styles.add_style sz: 12, b: true, bg_color: 'ADADAD', alignment: { horizontal: :center }

start_qty_col = 0
rt_col_width = 7.5

wb.add_worksheet(name: "Review") do |sheet|

  sheet.add_row ["#{@protocol.class.to_s} Information"], :style => header_style
  sheet.add_row ["#{@protocol.class.to_s} ID", @protocol.id], :style => default
  sheet.add_row ['Short Title', @protocol.short_title], :style => default
  sheet.add_row ["#{@protocol.class.to_s} Title", @protocol.title], :style => default
  sheet.add_row ["Funding Source", @protocol.display_funding_source_value], :style => default

  sheet.add_row

  sheet.add_row ["Authorized Users"], :style => header_style
  proxy_row = ["Name", "Role", "", "", "Proxy Rights"]

  has_per_patient_per_visit_services = !@service_list_false.empty?

  visit_count = 0
  if has_per_patient_per_visit_services
    @service_request.arms.each do |arm|
      visit_count = arm.visit_count unless visit_count > arm.visit_count
    end
  end

  if has_per_patient_per_visit_services
    (visit_count*2 + 3 + @admin_offset.to_i).times do
      proxy_row << ""
    end
  else
    (3 + @admin_offset.to_i).times do
     proxy_row << ""
    end
  end

  sheet.add_row proxy_row, :style => sub_header_style

  @protocol.project_roles.each do |pr|
    sheet.add_row [pr.identity.full_name, USER_ROLES.key(pr.role), "", "", PROXY_RIGHTS.key(pr.project_rights)], :style => default
  end

  sheet.add_row

  sheet.add_row ["Document Uploads"], :style => header_style

  doc_row = ["Name", "Type", "", "", "Uploaded Date"]
  if has_per_patient_per_visit_services
    (visit_count*2 + 3 + @admin_offset.to_i).times do
      doc_row << ""
    end
  else
    (3 + @admin_offset.to_i).times do
      doc_row << ""
    end
  end

  sheet.add_row doc_row, :style => sub_header_style

  @service_request.protocol.documents.each do |doc|
    next unless @sub_service_request.nil? or doc.sub_service_requests.map{|ssr| ssr.id}.include?(@sub_service_request.id)
    sheet.add_row [doc.document_file_name, DOCUMENT_TYPES.key(doc.doc_type), "", "", doc.updated_at.strftime('%m/%d/%y')], :style => default
  end

  sheet.add_row

  merge_services_row = []
  merge_service_rows = []
  merge_arm_rows = []
  merge_sub_header_rows = []

  ##### beginning of arms
  if has_per_patient_per_visit_services
    @service_request.arms.each do |arm|
      services_row = ["Selected Services", "CPT Code", "Order Code", "Notes"]
      services_row << "Current Cost" if @admin_offset
      services_row += ["Your Cost", "# of Subjects"]
      arm_row = [arm.name, "", "", "", "", "", ""]
      arm_row += [""] if @admin_offset

      num_visits = arm.visit_count
      visit_group_name_sizes = []

      arm.visit_groups.each do |vg|
        visit_group_name_sizes << vg.name.size
        services_row << "#{vg.name}"
        services_row << ""
        arm_row << "#{vg.day}"
        arm_row << ""
      end

      (visit_count - num_visits).times do
        services_row << ""
        services_row << ""
        arm_row << ""
        arm_row << ""
      end

      services_row << "Total Per Patient"
      services_row << "Total Per Study"
      arm_row << ""

      dbl_rt_col_width = rt_col_width * 2
      row_height_factor = (visit_group_name_sizes.max / dbl_rt_col_width).ceil

      if row_height_factor == 1
        services_row = sheet.add_row services_row, :style => header_style
      elsif row_height_factor > 1 && row_height_factor < 4
        services_row = sheet.add_row services_row, :style => header_style, :height => (row_height_factor * dbl_rt_col_width)
      elsif row_height_factor >= 4
        services_row = sheet.add_row services_row, :style => header_style, :height => (row_height_factor * dbl_rt_col_width * 1.4)
      end

      services_sub_header_rows = []
      service_rows = []
      merge_arm_rows << sheet.add_row(arm_row, :style => name_header_style)

      r_t_row = ["", "", "", "", "", ""]
      r_t_row << "" if @admin_offset

      num_visits.times do
        r_t_row << "R"
        r_t_row << "T"
      end

      even_set = true

      styles_array = [centered, centered, centered, centered, centered]
      styles_array << centered if @admin_offset
      styles_array << centered

      2.step(visit_count*2, 2) do
        styles_array << (even_set ? rt_hdr_even_style : rt_hdr_odd_style)
        styles_array << (even_set ? rt_hdr_even_style : rt_hdr_odd_style)
        even_set = !even_set
      end

      styles_array << [centered, centered]
      styles_array.flatten!

      sheet.add_row(r_t_row, :style => styles_array)

      @service_list_false.each do |key, value|
        next if @sub_service_request.present? && @sub_service_request.organization.name != value[:process_ssr_organization_name]

        services_sub_header_rows << sheet.add_row([value[:name]], :style => sub_header_style)

        arm.line_items_visits.each do |line_items_visit|

          even_set = true
          line_item = line_items_visit.line_item

          next if value[:line_items].exclude?(line_item) || (@sub_service_request.present? && line_item.sub_service_request_id != @sub_service_request.id)

          totals_hash = line_items_visit.try(:per_subject_rt_indicated)
          service_row = [line_item.service.name, line_item.service.cpt_code, ""]

          if line_items_visit.notes.empty?
            service_row += [""]
          else
            notes = line_items_visit.notes.map{|n| "* #{n.body} - #{n.created_at.strftime('%m/%d/%y')} by #{n.identity.full_name}"}.join("\r\n")
            service_row += [notes]
          end

          if @admin_offset
            line_item.pricing_scheme = 'effective'
            service_row << display_your_cost(line_item)
            line_item.pricing_scheme = 'displayed'
          end
          service_row += [display_your_cost(line_item), line_items_visit.subject_count]

          start_qty_col = service_row.size # grab the size so we know where the R/T columns start

          line_items_visit.ordered_visits.each_with_index do |v, index|
            service_row << (totals_hash["#{v.id}"] == 0 ? '' : v.research_billing_qty)
            service_row << (totals_hash["#{v.id}"] == 0 ? '' : v.insurance_billing_qty)
          end

          (visit_count - num_visits).times do
            service_row << ""
            service_row << ""
          end

          styles_array = [bordered, centered_bordered, bordered, wrap_bordered, bordered]
          styles_array << bordered if @admin_offset
          styles_array << centered_bordered

          2.step(visit_count*2, 2) do
            styles_array << (even_set ? rt_even_style : rt_odd_style)
            styles_array << (even_set ? rt_even_style : rt_odd_style)
            even_set = !even_set
          end

          styles_array << [bordered, bordered]
          styles_array.flatten!

          line_items_visit.line_item.pricing_scheme = 'effective' if @admin_offset

          service_row << display_visit_based_direct_cost(line_items_visit)
          service_row << display_visit_based_direct_cost_per_study(line_items_visit)
          service_rows << sheet.add_row(service_row, :style => styles_array)
        end
      end
      merge_services_row << services_row
      merge_service_rows << service_rows
      merge_sub_header_rows << services_sub_header_rows
      sheet.add_row
    end
  end
  ############ end of arms.each

  services_row = ["Selected Services", "", "", ""]
  services_row << "Current Cost" if @admin_offset
  services_row += ["Your Cost", ""]

  (visit_count*2 + 1).times do
    services_row << ""
  end

  services_row << "Total Per Study"

  services_row = sheet.add_row services_row, :style => header_style
  merge_services_row << services_row

  service_rows = []
  services_sub_header_rows = []
  services_sub_header_rows << sheet.add_row(['Other Services'], :style => name_header_style)
  @service_list_true.each do |key, value|
    next unless @sub_service_request.nil? or @sub_service_request.organization.name == value[:process_ssr_organization_name]
    services_sub_header_rows << sheet.add_row([value[:name]], :style => sub_header_style)
    line_items = @sub_service_request.nil? ? value[:line_items] : @sub_service_request.one_time_fee_line_items

    line_items.each do |line_item|
      service_row = [line_item.service.name, "", "", ""]
      line_item_total = display_one_time_fee_direct_cost(line_item)
      if @admin_offset
        line_item.pricing_scheme = 'effective'
        line_item_total = display_one_time_fee_direct_cost(line_item)
        service_row << display_your_cost(line_item)
        line_item.pricing_scheme = 'displayed'
      end

      if !@service_list_true.empty? && !@service_list_false.empty?
        service_row += [display_your_cost(line_item), ""]
      else
        service_row += [display_your_cost(line_item), "", ""]
      end

      if has_per_patient_per_visit_services
        (visit_count*2 + 1).times do
          service_row << ''
        end
      end

      service_row << line_item_total
      service_rows << sheet.add_row(service_row, :style => default)
    end
  end

  merge_service_rows << service_rows
  merge_sub_header_rows << services_sub_header_rows

  line_items = @sub_service_request ? @sub_service_request.line_items : @service_request.line_items
  line_items.each{|li| li.pricing_scheme = 'effective'} if @admin_offset


  ##SSR Total
  if @sub_service_request
    ssr_total_row = ["", "", "", "", "", "", ""]
    if has_per_patient_per_visit_services
      (visit_count*2).times do
        ssr_total_row << ""
      end
    end

    ssr_total_row += ["#{@sub_service_request.organization.abbreviation} Total", display_ssr_grand_total(@sub_service_request)]
    ssr_total_row = sheet.add_row(ssr_total_row, :style => row_header_style)
  end

  ##Total
  grand_total_row = @sub_service_request ? ["", "", "", "", "", "", ""] : ["", "", "", "", "", ""]

  if has_per_patient_per_visit_services
    (visit_count * 2).times do
      grand_total_row << ""
    end
  elsif @admin_offset
    grand_total_row << ""
  end

  grand_total_row += ["Total Cost", display_study_grand_total(@service_request.protocol, @service_request)]
  grand_total_row = sheet.add_row(grand_total_row, :style => row_header_style)

  ## signatures and disclaimer

  if @show_signature_section
    sheet.add_row

    signatures_text  = "The Signatures of the Principal Investigator and Study Delegate (study coordinator, grants adminstrator, etc.) indicate that this Study Calendar "
    signatures_text2 = "has been reviewed; the _____________________________________________________ billable services have been identified and the highlighted services "
    signatures_text3 = "should be included in an order set for unlicensed staff to process standing orders for the above identified study."

    first_signature_row = sheet.add_row([signatures_text], :style => row_header_style, :widths => [:ignore])
    sheet.add_row([signatures_text2], :style => row_header_style, :widths => [:ignore])
    sheet.add_row([signatures_text3], :style => row_header_style, :widths => [:ignore])
    sheet.add_row

    sheet.add_row(["Principal Investigator Signature:                     _________________________________________      Date: ____________________"], :style => default, :widths => [:ignore])
    sheet.add_row
    sheet.add_row(["Study Delegate Signature:                              _________________________________________      Date: ____________________"], :style => default, :widths => [:ignore])
    sheet.add_row
    sheet.add_row(["___________________ Delegate Signature: _________________________________________      Date: ____________________"], :style => default, :widths => [:ignore])
  end

  ###### style and merge cells ######

  end_column = "G"

  alpha_array = ("A".."Z").to_a
  additional_alpha_arrays_needed = ((visit_count*2 + 5 + @admin_offset.to_i)/26.0).ceil + 1 #add one since some columns get pushed over, safety.  doesn't matter if we have extra here

  additional_alpha_arrays = []
  additional_alpha_arrays_needed.times do |n|
    additional_alpha_arrays << alpha_array.map{|char| alpha_array[n] + char}
  end

  alpha_array = alpha_array + additional_alpha_arrays.flatten

  end_column = alpha_array[visit_count*2 + 7 + @admin_offset.to_i]

  sheet.merge_cells("A1:#{end_column}1") #info header
  sheet.merge_cells("B2:D2") #id
  sheet["A2"].style = row_header_style
  sheet.merge_cells("B3:D3") #short title
  sheet["A3"].style = row_header_style
  sheet.merge_cells("B4:D4") #title
  sheet["A4"].style = row_header_style
  sheet.merge_cells("B5:D5") #funding source
  sheet["A5"].style = row_header_style

  sheet.merge_cells("A7:#{end_column}7") #authorized user header
  sheet.merge_cells("B8:D8") # role header
  sheet.merge_cells("E8:F8") # proxy rights header

  first_authorized_user_row_number = 9
  last_authorized_user_row_number = 0 #store it so we know where the document uploads start
  @protocol.project_roles.size.times do |n|
    sheet.merge_cells("B#{first_authorized_user_row_number}:D#{first_authorized_user_row_number}")
    sheet.merge_cells("E#{first_authorized_user_row_number}:F#{first_authorized_user_row_number}")

    last_authorized_user_row_number = 8+n+1
    first_authorized_user_row_number += 1
  end

  document_uploads_row_number = last_authorized_user_row_number + 2 #row number for the document uploads header
  sheet.merge_cells("A#{document_uploads_row_number}:#{end_column}#{document_uploads_row_number}")

  (@service_request.protocol.documents.size + 1).times do |n|
    document_uploads_row_number += 1
    sheet.merge_cells("B#{document_uploads_row_number}:D#{document_uploads_row_number}")
    sheet.merge_cells("E#{document_uploads_row_number}:F#{document_uploads_row_number}")
  end

  merge_services_row.each do |services_row|
    #sheet.merge_cells("A#{services_row.index+1}:B#{services_row.index+1}")
    visit_count.times do |idx|
      start_idx = 2 * idx + 6 + @admin_offset.to_i
      end_idx = 2 * idx + 7 + @admin_offset.to_i
      sheet.merge_cells("#{alpha_array[start_idx]}#{services_row.index+1}:#{alpha_array[end_idx]}#{services_row.index+1}")
      sheet["#{alpha_array[start_idx]}#{services_row.index+1}"].style = header_centered_style
    end
  end

  # format the R/T columns to the same width
  (visit_count * 2).times do |n|
    sheet.column_info[start_qty_col].width = rt_col_width
    start_qty_col += 1
  end

#  merge_arm_rows.each do |arm_row|
#    sheet.merge_cells("A#{arm_row.index+1}:#{end_column}#{arm_row.index+1}")
#  end

  merge_sub_header_rows.each do |services_sub_header_rows|
    services_sub_header_rows.each do |sshr|
      sheet.merge_cells("A#{sshr.index+1}:#{end_column}#{sshr.index+1}") #selected services sub header row
    end
  end

#  merge_service_rows.each do |service_rows|
#    service_rows.each do |sr|
#      sheet.merge_cells("A#{sr.index+1}:B#{sr.index+1}")
#    end
#  end

  ######## +6 from left and then -3 from visit count to align correctly #######
  from_left = 6
  begin_column = alpha_array[visit_count + from_left - 3]
  end_column = alpha_array[visit_count + from_left - 2]
  sheet.merge_cells("#{begin_column}#{grand_total_row.index+1}:#{end_column}#{grand_total_row.index+1}") if has_per_patient_per_visit_services


  ### added for signature section, fix the width of A, and then merge cells
  if @show_signature_section
    sheet.merge_cells("A#{first_signature_row.index+1}:F#{first_signature_row.index+1}")
    sheet.merge_cells("A#{first_signature_row.index+2}:F#{first_signature_row.index+2}")
    sheet.merge_cells("A#{first_signature_row.index+3}:F#{first_signature_row.index+3}")
    sheet.merge_cells("A#{first_signature_row.index+4}:F#{first_signature_row.index+4}")
    sheet.merge_cells("A#{first_signature_row.index+5}:F#{first_signature_row.index+5}")
    sheet.merge_cells("A#{first_signature_row.index+6}:F#{first_signature_row.index+6}")
    sheet.merge_cells("A#{first_signature_row.index+7}:F#{first_signature_row.index+7}")
    sheet.merge_cells("A#{first_signature_row.index+8}:F#{first_signature_row.index+8}")
    sheet.merge_cells("A#{first_signature_row.index+9}:F#{first_signature_row.index+9}")
  end

  ### setting some column widths
  if @admin_offset
    sheet.column_widths nil, 12, 12, 50, 15, 15, 15
  else
    sheet.column_widths nil, 12, 12, 50, 15, 15
  end
end
