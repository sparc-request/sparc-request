-# Copyright Â© 2011-2022 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%aside.w-20#filterResponses
  .card
    = form_for_filterrific filterrific, remote: true do |form|
      .card-header.bg-primary.text-white
        %h3.mb-0
          = t(:surveyor)[:response_filters][:header]
      .card-body
        .form-group.row
          = form.label :of_type, t(:surveyor)[:response_filters][:fields][:type], class: 'col-4 control-label'
          .col-8
            = form.select :of_type, filterrific.select_options[:of_type], {}, autocomplete: 'off', class: 'form-control selectpicker'
        .form-group.row
          = form.label :with_state, t(:surveyor)[:response_filters][:fields][:state], class: 'col-4 control-label'
          .col-8
            = form.select :with_state, options_for_select(Response::STATE_FILTERS, filterrific.with_state), {}, autocomplete: 'off', class: 'form-control selectpicker', multiple: true
        .form-group.row{ id: "for-#{Form.name}", class: filterrific.of_type == Form.name ? "" : "d-none" }
          = form.label :with_survey, Form.name, class: 'col-4 control-label'
          .col-8
            = render 'surveyor/responses/surveys_dropdown', surveys: Form.for_admin_users(current_user), filterrific: filterrific, form: form
        .form-group.row{ id: "for-#{SystemSurvey.name}", class: filterrific.of_type == SystemSurvey.name ? "" : "d-none" }
          = form.label :with_survey, Survey.name, class: 'col-4 control-label'
          .col-8
            = render 'surveyor/responses/surveys_dropdown', surveys: SystemSurvey.for(current_user), filterrific: filterrific, form: form
        .form-group.row
          .col-sm-12
            %label
              = t(:surveyor)[:response_filters][:fields][:completion_date]
          = form.label :start_date, t(:surveyor)[:response_filters][:fields][:from], class: 'col-4 control-label'
          .col-8
            .input-group.datetimepicker.date#responseStartDatePicker{ data: { target_input: 'nearest' } }
              = form.text_field :start_date, class: 'form-control datetimepicker-input', value: filterrific.start_date ? filterrific.start_date.to_date.strftime('%m/%d/%Y') : '', data: { target: '#responseStartDatePicker' }
              .input-group-append{ data: { toggle: 'datetimepicker', target: '#responseStartDatePicker' } }
                %span.input-group-text
                  = icon('fas', 'calendar-alt')
        .form-group.row
          = form.label :end_date, t(:surveyor)[:response_filters][:fields][:to], class: 'col-4 control-label'
          .col-8
            .input-group.datetimepicker.date#responseEndDatePicker{ data: { target_input: 'nearest' } }
              = form.text_field :end_date, class: 'form-control datetimepicker-input', value: filterrific.end_date ? filterrific.end_date.to_date.strftime('%m/%d/%Y') : '', data: { target: '#responseEndDatePicker' }
              .input-group-append{ data: { toggle: 'datetimepicker', target: '#responseEndDatePicker' } }
                %span.input-group-text
                  = icon('fas', 'calendar-alt')
        .form-group.row
          = form.label :include_incomplete, t(:surveyor)[:response_filters][:fields][:include_incomplete], class: 'col-lg-10 control-label'
          .col-lg-2
            = form.check_box :include_incomplete, {}, 'true', 'false'
      .card-footer.flex-wrap
        = form.submit t('actions.filter'), class: 'btn btn-block btn-primary mb-2'
        .col-lg-6.col-12.pl-0.pr-1
          %button.btn.btn-block.btn-outline-primary#saveResponseFilters{ type: 'button', title: t('dashboard.protocol_filters.tooltips.save'), data: { toggle: 'tooltip', placement: 'top' } }<
            = icon('fas', 'save mr-2')
            = t('actions.save')
        .col-lg-6.col-12.pr-0.pl-1
          = link_to reset_filterrific_url, remote: true, title: t('dashboard.protocol_filters.tooltips.reset'), class: 'btn btn-block btn-outline-primary', data: { toggle: 'tooltip', placement: 'top' } do
            = succeed t('actions.reset') do
              = icon('fas', 'sync mr-2')

  = render 'surveyor/response_filters/saved_searches'
