# Copyright Â© 2011 MUSC Foundation for Research Development
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

wb = xlsx_package.workbook
default = wb.styles.add_style alignment: { horizontal: :left }
centered = wb.styles.add_style alignment: { horizontal: :center }
bordered = wb.styles.add_style :border=> {:style => :thin, :color => "00000000"}
centered_bordered = wb.styles.add_style :border => {:style => :thin, :color => "00000000"}, :alignment => {:horizontal => :center}
row_header_style = wb.styles.add_style b: true
header_style = wb.styles.add_style sz: 12, b: true, bg_color: '0099FF', fg_color: 'FFFFFF', alignment: { horizontal: :left }
header_centered_style = wb.styles.add_style sz: 12, b: true, bg_color: '0099FF', fg_color: 'FFFFFF', alignment: { horizontal: :center }
sub_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'E8E8E8', alignment: { horizontal: :left }
name_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'ADADAD', alignment: { horizontal: :left }

wb.add_worksheet(name: "Consolidated Report") do |sheet|

  sheet.add_row ["#{@protocol.class.to_s} Information"], :style => header_style
  sheet.add_row ["#{@protocol.class.to_s} ID:", @protocol.id], :style => default
  sheet.add_row ['Short Title:', @protocol.short_title], :style => default
  sheet.add_row ["#{@protocol.class.to_s} Title:", @protocol.short_title], :style => default
  sheet.add_row ["Funding Source:", @protocol.display_funding_source_value], :style => default

  sheet.add_row

  sheet.add_row ["Authorized Users"], :style => header_style
  proxy_row = ["Name", "Role", "", "Proxy Rights"]

  arm_visit_count_max = @protocol.arms.map{|arm| arm.visit_groups.count}.max
  protocol_has_per_patient_per_visit = false

  @protocol.arms.each do |arm|
    @per_patient_line_items = arm.per_patient_per_visit_line_items

    if @per_patient_line_items
      protocol_has_per_patient_per_visit = true
      (arm_visit_count_max * 2 + 2).times do
        proxy_row.push ""
      end
    end
  end

  sheet.add_row proxy_row, :style => sub_header_style

  @protocol.project_roles.each do |pr|
    sheet.add_row [pr.identity.full_name, USER_ROLES.key(pr.role), "", PROXY_RIGHTS.key(pr.project_rights)], :style => default
  end

  sheet.add_row

  sheet.add_row ["Document Uploads"], :style => header_style

  doc_row = ["Name", "Type", "", "Institution/Provider/Program/Core"]

  sheet.add_row doc_row, :style => sub_header_style

  @protocol.service_requests.each do |service_request|

    service_request.documents.each do |doc|
      parents = []

      doc.sub_service_requests.each do |ssr|
        next unless service_request.service_list.keys.include?(ssr.organization_id)
        parents << service_request.service_list[ssr.organization_id][:name]
      end
      sheet.add_row [doc.document_file_name, DOCUMENT_TYPES.key(doc.doc_type), "", parents.first], :style => default
      parents.shift #remove first and iterate over remaining
      parents.each do |p|
        sheet.add_row ["", "", "", p], :style => default
      end
    end
  end

  sheet.add_row

  merge_services_row    = []
  merge_service_rows    = []
  merge_sub_header_rows = []

  if @per_patient_line_items

    @protocol.arms.each do |arm|
      services_row = ["Selected Services", ""]
      services_row << "Current Cost" if @admin_offset
      services_row += ["Your Cost", "# of Subjects"]

      arm.visit_groups.each do |vg|
        services_row << "#{vg.name}"
        services_row << ""
      end
      (arm_visit_count_max - arm.visit_groups.count).times do
        services_row << ""
        services_row << ""
      end
      services_row << "Total Per Patient"
      services_row << "Total Per Study"
      services_row = sheet.add_row services_row, :style => header_style
      services_sub_header_rows = []
      service_rows = []
      services_sub_header_rows << sheet.add_row([arm.name], :style => name_header_style)
      r_t_row = ["", "", "", ""]
      r_t_row << "" if @admin_offset

      arm.visit_groups.count.times do
        r_t_row << "R"
        r_t_row << "T"
      end


      sheet.add_row(r_t_row, :style => centered)

      filtered_line_items_visits = arm.line_items_visits.reject{|liv| ['first_draft', 'draft'].include?(liv.line_item.service_request.status)}

      grouped_line_items_visits = filtered_line_items_visits.group_by{|liv| liv.line_item.sub_service_request.org_tree_display}


      grouped_line_items_visits.each do |org, line_item_visits|

        services_sub_header_rows << sheet.add_row([org], :style => sub_header_style)

        line_item_visits.each do |line_item_visit|
          @service_row = [line_item_visit.line_item.service.name, ""]
          totals_hash = line_item_visit.try(:per_subject_rt_indicated)
          if @admin_offset
            line_item_visit.line_item.pricing_scheme = 'effective'
            @service_row << display_your_cost(line_item_visit.line_item)
            line_item_visit.line_item.pricing_scheme = 'displayed'
          end
          @service_row.push display_your_cost(line_item_visit.line_item)
          @service_row.push line_item_visit.subject_count
          line_item_visit.visits.each_with_index do |v, index|
            @service_row << (totals_hash["#{v.id}"] == 0 ? '' : v.research_billing_qty)
            @service_row << (totals_hash["#{v.id}"] == 0 ? '' : v.insurance_billing_qty)
          end

          (arm_visit_count_max - arm.visit_groups.count).times do
            @service_row << ""
            @service_row << ""
          end

          @styles_array = [bordered, bordered, bordered]
          @styles_array << bordered if @admin_offset
          @styles_array << centered_bordered
          ((arm_visit_count_max * 2) + 2).times do
            @styles_array << centered_bordered
          end
          @styles_array << [bordered, bordered]
          @styles_array.flatten!
          line_item_visit.line_item.pricing_scheme = 'effective' if @admin_offset
          @service_row << display_visit_based_direct_cost(line_item_visit)
          @service_row << display_visit_based_direct_cost_per_study(line_item_visit)

          service_rows << sheet.add_row(@service_row, :style => @styles_array)
        end
      end
      merge_services_row << services_row
      merge_service_rows << service_rows
      merge_sub_header_rows << services_sub_header_rows
      sheet.add_row
    end
  end

  services_row = ["Selected Services", ""]
  services_row << "Current Cost" if @admin_offset
  services_row += ["Your Cost", ""]

  unless @protocol.arms.empty?
    (arm_visit_count_max*2 + 1).times do
      services_row << ""
    end
  end

  services_row << "Total Per Study"

  services_row = sheet.add_row services_row, :style => header_style
  merge_services_row << services_row

  service_rows = []
  services_sub_header_rows = []
  services_sub_header_rows << sheet.add_row(['Other Services'], :style => name_header_style)

  service_request_ids = @protocol.service_requests.map(&:id)
  protocol_one_time_fee_line_items = LineItem.joins(:service).where(services: { one_time_fee: true }).where(service_request_id: service_request_ids)

  if protocol_one_time_fee_line_items.any?

    grouped_one_time_fee_line_items = protocol_one_time_fee_line_items.group_by(&:service_request_id)

    grouped_one_time_fee_line_items.each do |service_request_id, line_items|

      line_items.each do |line_item|
        services_sub_header_rows.push sheet.add_row([line_item.sub_service_request.org_tree_display], :style => sub_header_style)

        service_row = [line_item.service.name, ""]
        line_item_total = display_one_time_fee_direct_cost(line_item)

        if @admin_offset
          line_item.pricing_scheme = 'effective'
          line_item_total = display_one_time_fee_direct_cost(line_item)
          service_row << display_your_cost(line_item)
          line_item.pricing_scheme = 'displayed'
        end

        service_row += [display_your_cost(line_item), ""]

        if protocol_has_per_patient_per_visit
          (arm_visit_count_max*2 + 1).times do
            service_row << ''
          end
        end

        service_row << line_item_total
        service_rows << sheet.add_row(service_row, :style => default)
      end
    end
  end

  merge_service_rows << service_rows
  merge_sub_header_rows << services_sub_header_rows

  sheet.add_row

  direct_cost_total_row = protocol_has_per_patient_per_visit ? ["", "", "", "", ""] : ["", "", "", ""]

  if protocol_has_per_patient_per_visit
    (arm_visit_count_max*2 - 3).times do
      direct_cost_total_row << ""
    end
  end

  direct_cost_total_row << "" if @admin_offset

  @line_items.each{|li| li.pricing_scheme = 'effective'} if @admin_offset

  if protocol_has_per_patient_per_visit
    total = 0

    @protocol.service_requests.each do |service_request|
      unless ['first_draft', 'draft'].include?(service_request.status)
        total += service_request.direct_cost_total(service_request.line_items)
      end
    end

    direct_cost_total_row += ["Total Direct Cost", "", "", number_to_currency(total / 100)]
  else
    total = 0

    @protocol.service_requests.each do |service_request|
      unless ['first_draft', 'draft'].include?(service_request.status)
        total += service_request.direct_cost_total(service_request.line_items)
      end
    end

    direct_cost_total_row += ["Total Direct Cost", number_to_currency(total / 100)]
  end

  direct_cost_total_row = sheet.add_row(direct_cost_total_row, :style => row_header_style)

  if USE_INDIRECT_COST
    indirect_cost_total_row = protocol_has_per_patient_per_visit ? ["", "", "", "", ""] : ["", "", "", ""]

    if protocol_has_per_patient_per_visit
      (arm_visit_count_max * 2 - 3).times do
        indirect_cost_total_row << ""
      end
    end

    indirect_cost_total_row << "" if @admin_offset

    if protocol_has_per_patient_per_visit
      total = 0

      @protocol.service_requests.each do |service_request|
        unless ['first_draft', 'draft'].include?(service_request.status)
          total += service_request.indirect_cost_total(service_request.line_items)
        end
      end

      indirect_cost_total_row += ["Total Direct Cost", "", "", number_to_currency(total / 100)]
    else
      total = 0

      @protocol.service_requests.each do |service_request|
        total += service_request.indirect_cost_total(service_request.line_items)
      end

      indirect_cost_total_row += ["Total Direct Cost", number_to_currency(total / 100)]
    end

    indirect_cost_total_row = sheet.add_row(indirect_cost_total_row, :style => row_header_style)
  end

  grand_total_row = protocol_has_per_patient_per_visit ? ["", "", "", "", ""] : ["", "", "", ""]

  if protocol_has_per_patient_per_visit
    (arm_visit_count_max * 2 - 3).times do
      grand_total_row << ""
    end
  end

  grand_total_row << "" if @admin_offset

  if protocol_has_per_patient_per_visit
    total = 0

    @protocol.service_requests.each do |service_request|
      unless ['first_draft', 'draft'].include?(service_request.status)
        total += service_request.grand_total(service_request.line_items)
      end
    end

    grand_total_row += ["Grand Total", "", "", number_to_currency(total / 100)]
  else
    total = 0

    @protocol.service_requests.each do |service_request|
      unless ['first_draft', 'draft'].include?(service_request.status)
        total += service_request.grand_total(service_request.line_items)
      end
    end

    grand_total_row += ["Grand Total", number_to_currency(total / 100)]
  end

  grand_total_row = sheet.add_row(grand_total_row, :style => row_header_style)

  end_column = "E"

  alpha_array = ("A".."Z").to_a
  unless @protocol.arms.empty?
    additional_alpha_arrays_needed = ((arm_visit_count_max * 2 + 5 + @admin_offset.to_i)/26.0).ceil + 1 #add one since some columns get pushed over, safety.  doesn't matter if we have extra here
    additional_alpha_arrays = []
    additional_alpha_arrays_needed.times do |n|
      additional_alpha_arrays << alpha_array.map{|char| alpha_array[n] + char}
    end

    alpha_array = alpha_array + additional_alpha_arrays.flatten

    end_column = alpha_array[arm_visit_count_max * 2 + 5 + @admin_offset.to_i]
    sheet.merge_cells("A1:#{end_column}1") #info header
    sheet.merge_cells("B2:D2") #id
    sheet["A2"].style = row_header_style
    sheet.merge_cells("B3:D3") #short title
    sheet["A3"].style = row_header_style
    sheet.merge_cells("B4:D4") #title
    sheet["A4"].style = row_header_style
    sheet.merge_cells("B5:D5") #funding source
    sheet["A5"].style = row_header_style

    sheet.merge_cells("A7:#{end_column}7") #authorized user header
    sheet.merge_cells("B8:C8") #table sub header
    last_authorized_user_row_number = 0 #store it so we know where the document uploads start
    @protocol.project_roles.size.times do |n|
      sheet.merge_cells("B#{8+n+1}:C#{8+n+1}")
      last_authorized_user_row_number = 8+n+1
    end

    document_uploads_row_number = last_authorized_user_row_number + 2 #row number for the document uploads header
    sheet.merge_cells("A#{document_uploads_row_number}:#{end_column}#{document_uploads_row_number}")

    merge_services_row.each do |services_row|
      sheet.merge_cells("A#{services_row.index+1}:B#{services_row.index+1}")
      arm_visit_count_max.times do |idx|
        start_idx = 2 * idx + 4 + @admin_offset.to_i
        end_idx = 2 * idx + 5 + @admin_offset.to_i
        sheet.merge_cells("#{alpha_array[start_idx]}#{services_row.index+1}:#{alpha_array[end_idx]}#{services_row.index+1}")
        sheet["#{alpha_array[start_idx]}#{services_row.index+1}"].style = header_centered_style
      end
    end

    merge_sub_header_rows.each do |services_sub_header_rows|
      services_sub_header_rows.each do |sshr|
        sheet.merge_cells("A#{sshr.index+1}:#{end_column}#{sshr.index+1}") #selected services sub header row
      end
    end

    merge_service_rows.each do |service_rows|
      service_rows.each do |sr|
        sheet.merge_cells("A#{sr.index+1}:B#{sr.index+1}")
      end
    end

    ######## +4 from left and then -3 from visit count to align correctly #######
    from_left = 4

    begin_column = alpha_array[arm_visit_count_max + from_left - 3]
    end_column = alpha_array[arm_visit_count_max + from_left - 2]
    sheet.merge_cells("#{begin_column}#{direct_cost_total_row.index+1}:#{end_column}#{direct_cost_total_row.index+1}") if protocol_has_per_patient_per_visit
    sheet.merge_cells("#{begin_column}#{indirect_cost_total_row.index+1}:#{end_column}#{indirect_cost_total_row.index+1}") if protocol_has_per_patient_per_visit if USE_INDIRECT_COST
    sheet.merge_cells("#{begin_column}#{grand_total_row.index+1}:#{end_column}#{grand_total_row.index+1}") if protocol_has_per_patient_per_visit
  end
end
