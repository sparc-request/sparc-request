-# Copyright Â© 2011-2016 MUSC Foundation for Research Development.
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#one_time_fee_errors{:style => 'display:none;'}
  = t(:service_requests)[:detail_list][:text1]
  %span#quantity
  = t(:service_requests)[:detail_list][:text2]
  %span#unit_minimum
  %br
  = t(:service_requests)[:detail_list][:text3]

#unit_max_error{:style => 'display:none;'}
  = t(:service_requests)[:detail_list][:text4]
  %span#unit_quantity
  = t(:service_requests)[:detail_list][:text5]
  %span#unit_max
  %br
  = t(:service_requests)[:detail_list][:text6]

%table.one-time-fees
  %thead
    %tr
      %th= t(:service_requests)[:detail_list][:service]
      %th 
        = t(:service_requests)[:detail_list][:quantity]
        %br
        %span.small_desc= t(:service_requests)[:detail_list][:description1]
      %th 
        = t(:service_requests)[:detail_list][:up_quantity]
        %br
        %span.small_desc= t(:service_requests)[:detail_list][:description2]
      %th= t(:service_requests)[:detail_list][:q_type]
  %tbody#this-is-a-test
    - @service_request.service_list(true).each do |key, value|
      - next unless @sub_service_request.nil? or @sub_service_request.organization.name == value[:process_ssr_organization_name]
      %tr
        %th.provider-header{:colspan => 4}= value[:name]
      %tr
      - value[:line_items].each do |line_item|
        = fields_for "service_request[line_items_attributes][]", line_item do |f|
          %tr
            %td= line_item.service.name
            %td.skinny_fields
              = f.hidden_field :id
              = f.text_field :quantity, :unit_minimum => line_item.service.displayed_pricing_map.unit_minimum, :class => 'line_item_quantity', :current_quantity => line_item.quantity
            %td.skinny_fields
              = f.text_field :units_per_quantity, "data-qty_max" => line_item.service.displayed_pricing_map.units_per_qty_max, :class => "units_per_quantity"
            %td= line_item.service.try(:displayed_pricing_map).try(:unit_type).try(:humanize)
