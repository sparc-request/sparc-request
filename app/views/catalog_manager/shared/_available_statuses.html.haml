-# Copyright Â© 2011-2017 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#all_statuses{style: @organization.use_default_statuses ? "display: none;" : "display: block;"}
  %table
    %tr
      %td
        %legend= t(:organization_form)[:available_statuses]
        %table
          = f.fields_for :available_statuses, @organization.available_statuses.sort{|x, y| PermissibleValue.get_value('status', x.status) <=> PermissibleValue.get_value('status', y.status)} do |as|
            %tr
              %th= as.label :status, "#{PermissibleValue.get_value('status', as.object.status).gsub('CTRC', 'Nexus')}:"
              %td= as.check_box "_destroy", {class: 'available-status', checked: (as.object.new_record? ? @organization.use_default_statuses && PermissibleValue.get_key_list('status', true).include?(as.object.status) : true), disabled: ["Draft", "Get a Cost Estimate", "Submitted"].include?(PermissibleValue.get_value('status', as.object.status)), data: { status: as.object.status }}, false, true
              = as.hidden_field :status, :value => as.object.status

    - if current_user.is_overlord?
      %tr
        %td
          %br
          %legend= t(:organization_form)[:editable_statuses]
          %table
            = f.fields_for :editable_statuses, @organization.editable_statuses.sort{|x, y| PermissibleValue.get_value('status', x.status) <=> PermissibleValue.get_value('status', y.status)} do |es|
              %tr{ class: "#{es.object.status}-dependent", style: @organization.available_statuses.select{|as| as.new_record? ? @organization.use_default_statuses && PermissibleValue.get_key_list('status', true).include?(as.status) : true}.map(&:status).include?(es.object.status) ? "display:table-row;" : "display:none;" }
                %th= es.label :status, "#{PermissibleValue.get_value('status', es.object.status).gsub('CTRC', 'Nexus')}:"
                %td= es.check_box "_destroy", {:checked => !es.object.new_record?}, false, true
                = es.hidden_field :status, :value => es.object.status
