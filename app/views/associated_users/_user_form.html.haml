-# Copyright Â© 2011-2019 MUSC Foundation for Research Development
-# All rights reserved.

-# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

-# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

-# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
-# disclaimer in the documentation and/or other materials provided with the distribution.

-# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
-# derived from this software without specific prior written permission.

-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
-# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
-# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
-# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
-# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- entity = in_dashboard? ? [:dashboard, protocol_role] : protocol_role

-# TODO: Refactoring ProjectRole to AssociatedUser will remove the need for specifying the URL
- if in_dashboard?
  - url = protocol_role.new_record? ? dashboard_associated_users_path : dashboard_associated_user_path(protocol_role)
  - change_user_url = new_dashboard_associated_user_path(protocol_id: protocol.id)
- else
  - url = protocol_role.new_record? ? associated_users_path : associated_user_path(protocol_role)
  - change_user_url = new_associated_user_path(srid: service_request.id)

.modal-dialog{ role: 'document' }
  .modal-content
    = form_for entity, url: url, remote: true, html: { id: 'authorizedUserForm' } do |f|
      = f.hidden_field :identity_id
      = f.hidden_field :protocol_id
      - unless in_dashboard?
        = hidden_field_tag :srid, service_request.id
      .modal-header
        %h3.modal-title
          = t("authorized_users.#{action_name}")
        %button.close{ type: 'button', data: { dismiss: 'modal' }, aria: { label: t('actions.close') } }
          %span{ aria: { hidden: 'true' } } &times;
      .modal-body
        .form-group.text-center
          %h5.mb-0
            = identity.display_name
            - if action_name == 'new'
              = link_to icon('fas', 'times'),change_user_url, remote: true, class: 'text-danger', title: t('authorized_users.form.change'), data: { toggle: "tooltip", placement: 'right' }

        = f.fields_for :identity do |ff_i|
          .form-row
            .form-group.col-6
              = ff_i.label :phone
              .input-group
                .input-group-prepend
                  %span.input-group-text
                    = icon('fas', 'phone')
                = ff_i.telephone_field :phone, class: 'form-control', placeholder: t('constants.phone.placeholder')
              %small.form-text.text-muted
                = t('constants.phone.note')
            .form-group.col-6
              = ff_i.label :orcid
              = ff_i.text_field :orcid, class: 'form-control', placeholder: t('authorized_users.form.placeholders.orcid'), maxlength: 19
              %small.form-text
                = link_to t('authorized_users.form.links.orcid'), t('authorized_users.form.links.orcid')

          .form-group#eraCommonsNameContainer{ class: ['pi', 'primary-pi'].include?(protocol_role.role) ? '' : 'd-none' }
            = ff_i.label :era_commons_name
            = ff_i.text_field :era_commons_name, class: 'form-control'

          .form-row
            .form-group.col-4
              = ff_i.label :credentials
              = ff_i.select :credentials, options_for_select(PermissibleValue.get_inverted_hash('user_credential'), ff_i.object.credentials), { include_blank: true }, class: 'selectpicker'
            .form-group.col-4#credentialsOtherContainer{ class: ff_i.object.credentials == 'other' ? '' : 'd-none' }
              = ff_i.label :credentials_other, t('constants.prompts.please_specify')
              = ff_i.text_field :credentials_other, class: 'form-control'
            .form-group.col-4#subspecialtyContainer{ class: ['pi', 'primary-pi'].include?(protocol_role.role) ? '' : 'd-none' }
              = ff_i.label :subspecialty
              = ff_i.select :subspecialty, options_for_select(PermissibleValue.get_inverted_hash('subspecialty'), identity.subspecialty), { include_blank: true }, class: 'selectpicker'
            

          = render 'associated_users/professional_organizations', professional_organization: ff_i.object.professional_organization

        %hr

        .form-row
          .form-group.col-6
            = f.label :role, class: 'required'
            = f.select :role, options_for_select(PermissibleValue.get_inverted_hash('user_role'), protocol_role.role), { include_blank: true }, class: 'selectpicker', disabled: protocol_role.role == 'primary-pi'
          .form-group.col-6#roleOtherContainer{ class: protocol_role.role == 'other' ? '' : 'd-none' }
            = f.label :role_other, t('constants.prompts.please_specify'), class: 'required'
            = f.text_field :role_other, class: 'form-control'

        .form-row
          .form-group.col-6
            = f.label :project_rights, class: 'required'
            .d-block
              - PermissibleValue.get_inverted_hash('proxy_right').each do |key, value|
                .custom-control.custom-radio
                  = f.radio_button :project_rights, value, class: 'custom-control-input', disabled: ['pi', 'primary-pi', 'business-grants-manager'].include?(protocol_role)
                  = f.label "project_rights_#{value}", key, class: 'custom-control-label', title: t("authorized_users.tooltips.#{value}"), data: { toggle: 'tooltip', placement: 'right' }
          - if Setting.get_value("use_epic") && protocol.selected_for_epic
            .form-group.col-6
              = f.label :epic_access, class: 'required', title: t('authorized_users.tooltips.epic_access'), data: { toggle: 'tooltip', placement: 'right' }
              .d-block
                .custom-control.custom-radio.custom-control-inline
                  = f.radio_button :epic_access, true, class: 'custom-control-input', disabled: Setting.get_value("validate_epic_users") && !EpicUser.is_active?(epic_user)
                  = f.label :epic_access_true, t('constants.yes_select'), class: 'custom-control-label'
                .custom-control.custom-radio.custom-control-inline
                  = f.radio_button :epic_access, false, class: 'custom-control-input', disabled: Setting.get_value("validate_epic_users") && !EpicUser.is_active?(epic_user)
                  = f.label :epic_access_false, t('constants.no_select'), class: 'custom-control-label'

              - if Setting.get_value("validate_epic_users") && !EpicUser.is_active?(epic_user)
                %small.form-text.text-danger
                  = t('authorized_users.form.no_epic_access')

      .modal-footer
        %button.btn.btn-secondary{ type: 'button', data: { dismiss: 'modal' } }
          = t('actions.close')
        = f.submit t('actions.submit'), class: 'btn btn-primary'
