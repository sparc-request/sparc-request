# Copyright Â© 2011 MUSC Foundation for Research Development
# All rights reserved.

# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided with the distribution.

# 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
# SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
# TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

wb = xlsx_package.workbook
default = wb.styles.add_style alignment: { horizontal: :left }
bold_default = wb.styles.add_style alignment: {horizontal: :left}, b: true
centered = wb.styles.add_style alignment: {horizontal: :center}
# centered = wb.styles.add_style alignment: { horizontal: :center }
# bordered = wb.styles.add_style :border=> {:style => :thin, :color => "00000000"}
# centered_bordered = wb.styles.add_style :border => {:style => :thin, :color => "00000000"}, :alignment => {:horizontal => :center}
money = wb.styles.add_style :format_code => '$* #,##0.00_);[Red]-$*#,###.00;$* -??_;'
bold_money = wb.styles.add_style :format_code => '$#,##0.00_);[Red]-$#,###.00;$* -??_;', b: true
percent = wb.styles.add_style :format_code => '0.00\%', b: true, alignment: { horizontal: :left }
row_header_style = wb.styles.add_style b: true
header_style = wb.styles.add_style sz: 12, b: true, bg_color: '0099FF', fg_color: 'FFFFFF', alignment: { horizontal: :left, wrap_text: true}
header_center_style = wb.styles.add_style sz: 12, b: true, bg_color: '0099FF', fg_color: 'FFFFFF', alignment: { horizontal: :center, wrap_text: true}
sub_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'ADADAD', alignment: { horizontal: :left }
sub_header_center_style = wb.styles.add_style sz: 12, b: true, bg_color: 'ADADAD', alignment: { horizontal: :center}
org_header_style = wb.styles.add_style sz: 12, b: true, bg_color: 'CCCCCC', alignment: { horizontal: :left }

arm_totals_ref = {}

# Page for each arm
@protocol.arms.each do |arm|
  wb.add_worksheet(name: "#{arm.sanitized_name}") do |sheet|

    #Repeating protocol information on the top of each page
    protocol_header_row = ["#{@protocol.class.to_s} Information"] + [""] * (5 + (arm.visit_groups.count * 2) + 2)
    sheet.add_row protocol_header_row, :style => header_style
    sheet.add_row ["SPARC #{@protocol.class.to_s} ID:",@protocol.id], :style => default
    sheet.add_row ["RMID:", @protocol.research_master_id]
    sheet.add_row ["Short Title:",@protocol.short_title], :style => default
    sheet.add_row ["Primary PI Name:", @protocol.primary_principal_investigator.full_name], :style => default
    sheet.add_row ["Indirect Cost Rate:", "=Summary!B10"], style: percent

    indirect_cost_ref = sheet.rows.last.cells.last.r

    sheet.add_row []
    sheet.add_row ["#{arm.name}: Subject Count", arm.subject_count]

    subject_count_ref = sheet.rows.last.cells.last.r

    #Header Section
    research_cost_label = "Research Cost (Your Cost)"
    negotiated_reimbursement_label = "Sponsor Unit Cost (Service Rate or Negotiated Reimbursement)"

    arm_header_row = ["Selected Services", "CPT Code", "Status", negotiated_reimbursement_label, research_cost_label, "# of Subjects"]
    arm_label_row = [arm.sanitized_name, "", "", "", "", ""]
    label_row = ["", "", "", "", "", ""]
    arm_label_style = [sub_header_style] * arm_label_row.count
    arm_header_style = [header_style] * arm_header_row.count
    cells_to_merge = []

    #Column headers and labels for each visit_group, meaning each visit / appointment
    arm_start = sheet.rows.length
    vg_start = arm_label_row.length

    arm.visit_groups.each_with_index do |vg, index|
      arm_header_row += [vg.name, ""]
      arm_label_row += [vg.day, ""]
      arm_header_style += [header_center_style, header_center_style]
      arm_label_style += [sub_header_center_style, sub_header_center_style]
      label_row += ["R", "T"]
      last_group = arm_header_row.length - 2
      cells_to_merge << {from: Axlsx::cell_r(last_group, arm_start), to: Axlsx::cell_r(last_group + 1, arm_start)}
      cells_to_merge << {from: Axlsx::cell_r(last_group, arm_start+1), to: Axlsx::cell_r(last_group + 1, arm_start+1)}
    end

    arm_header_row += ["Total Sponsor Unit Cost Per Patient", "Total Research Cost Per Patient"]
    arm_label_row += ["", ""]
    arm_header_style += [header_style, header_style]
    arm_label_style += [sub_header_style, sub_header_style]

    sheet.add_row arm_header_row, :style => arm_header_style

    research_cost_column = Axlsx::col_ref(sheet.rows.last.cells.index{|c| c.value == research_cost_label})
    negotiated_reimbursement_column = Axlsx::col_ref(sheet.rows.last.cells.index{|c| c.value == negotiated_reimbursement_label})

    sheet.add_row arm_label_row, :style => arm_label_style

    r_columns = sheet.rows.last.cells[vg_start, arm.visit_groups.count].each_slice(2).map{|cs| cs.first.r[/([A-Z]+)/]}
    r_rows = []

    sheet.add_row label_row.flatten, :style => centered

    #Displays line_items_visits, grouped by organization from the sub service request
    arm.line_items_visits.includes(:line_item).group_by{|liv| liv.line_item.sub_service_request}.each do |sub_service_request, line_items_visits|
      next if @statuses_hidden.include?(sub_service_request.status)

      sheet.add_row ["#{sub_service_request.organization.name}(#{sub_service_request.ssr_id})"] + [""] * (5 + (arm.visit_groups.count * 2) + 2), style: org_header_style

      current_row = sheet.rows.length + 1

      line_items_visits.each do |liv|
        @line_item_style_array = [default, default, default, money, money, default]

        line_item_row = [ liv.line_item.service.name,
                          liv.line_item.service.cpt_code,
                          PermissibleValue.get_value('status', liv.line_item.sub_service_request.status),
                          cents_to_dollars(liv.line_item.service.current_effective_pricing_map.full_rate),
                          cents_to_dollars(liv.line_item.applicable_rate),
                          liv.subject_count ]

        liv.ordered_visits.each_with_index do |visit, index|
          line_item_row += [visit.research_billing_qty, visit.insurance_billing_qty]
          @line_item_style_array += [centered, centered]
        end

        total_sponsor_unit_costs_formula = "=#{negotiated_reimbursement_column + current_row.to_s}*(#{r_columns.join(current_row.to_s + '+') + current_row.to_s})"
        total_research_costs_formula = "=#{research_cost_column + current_row.to_s}*(#{r_columns.join(current_row.to_s + '+') + current_row.to_s})"
        line_item_row += [total_sponsor_unit_costs_formula, total_research_costs_formula]
        @line_item_style_array += [money, money]

        sheet.add_row line_item_row.flatten, :style => @line_item_style_array
        r_rows << current_row
        current_row += 1
      end
    end

    sheet.add_row

    current_row = sheet.rows.length

    total_research_cost_ppv = ["Total per Patient per Visit (-OH)"] + [""] * 5

    total_research_cost_style = [default] * 6

    r_columns.each do |col|
      r_col_with_rows = (col + r_rows.join(" " + col)).split(" ")
      research_cost_col_with_rows = (research_cost_column + r_rows.join(" " + research_cost_column)).split(" ")
      multiplied = r_col_with_rows.zip(research_cost_col_with_rows).map{|vals| vals.join("*")}
      total_research_cost_ppv += [ "=#{multiplied.join('+')}", "" ]
      total_research_cost_style += [ money, default ]
    end

    totals_column = Axlsx::col_ref(total_research_cost_ppv.length)
    total_research_cost_ppv << "=SUM(#{totals_column + r_rows.first.to_s}:#{totals_column + r_rows.last.to_s})"
    total_research_cost_style += [ money, default ]

    sheet.add_row total_research_cost_ppv, style: total_research_cost_style

    total_research_row = sheet.rows.length

    total_sponsor_cost_ppv = ["Total per Patient per Visit (+OH)"] + [""] * 5

    (r_columns + [ totals_column ]).each do |col|
      total_sponsor_cost_ppv += ["=#{col + total_research_row.to_s}*(#{indirect_cost_ref}/100)", ""]
    end

    sheet.add_row total_sponsor_cost_ppv, style: total_research_cost_style

    total_sponsor_row = sheet.rows.length
    total_sponsor_ref = totals_column + total_sponsor_row.to_s

    total_margin_ppv = ["Total Margin per Patient per Visit"] + [""] * 5
    total_margin_ppv_style = [default] * 6

    r_columns.each do |col|
      r_col_with_rows = (col + r_rows.join(" " + col)).split(" ")
      research_cost_col_with_rows = (research_cost_column + r_rows.join(" " + research_cost_column)).split(" ")
      negotiated_cost_col_with_rows = (negotiated_reimbursement_column + r_rows.join(" " + negotiated_reimbursement_column)).split(" ")
      subtracted = negotiated_cost_col_with_rows.zip(research_cost_col_with_rows).map{|vals| vals.join('-')}
      multiplied = subtracted.zip(r_col_with_rows).map{|vals| vals.join('*')}
      total_margin_ppv += [ "=#{multiplied.join('+')}", "" ]
      total_margin_ppv_style += [money, default]
    end

    sheet.add_row total_margin_ppv, style: total_margin_ppv_style

    total_margin_row = sheet.rows.length

    sheet.add_row ["Total margin per Study for per Patient Assessments", "=SUM(#{r_columns.first + total_margin_row.to_s},#{r_columns.last + total_margin_row.to_s})*#{subject_count_ref}"], style: [default, money]

    sheet.add_row []

    arm_summary_row = ["#{arm.sanitized_name}: Summary"] + [""] * (5 + arm.visit_groups.count * 2 + 2)
    sheet.add_row arm_summary_row, :style => header_style

    sheet.add_row ["#{arm.sanitized_name}: Total Cost (-OH) per Patient", "", "", "=#{r_columns.join(total_research_row.to_s + '+') + total_research_row.to_s}"], style: [default, default, default, money]

    sheet.add_row ["#{arm.sanitized_name}: Total Cost (+OH) per Patient", "", "", "=#{r_columns.join(total_sponsor_row.to_s + '+') + total_sponsor_row.to_s}"], style: [default, default, default, money]

    total_sponsor_ppv_ref = sheet.rows.last.cells.last.r

    sheet.add_row ["#{arm.sanitized_name}: Total Margin per Patient", "", "", "=#{r_columns.join(total_margin_row.to_s + '+') + total_margin_row.to_s}" ], style: [default, default, default, money]

    cells_to_merge.each{|cells| sheet.merge_cells "#{cells[:from]}:#{cells[:to]}"}

    total_margin_ref = sheet.rows.last.cells.last.r

    arm_totals_ref[arm.sanitized_name] = { total_sponsor_per_visit: total_sponsor_ref, total_margin_ppv: total_margin_ref, total_sponsor_ppv: total_sponsor_ppv_ref, subject_count: subject_count_ref }

    sheet.column_widths *( [40, 20, 10, 18, 18, 18] + ( [12] * arm.visit_groups.count * 2 ) + [18, 18] )
  end
end


wb.insert_worksheet(0, name: "Summary") do |sheet|
  sheet.add_row ["#{@protocol.class.to_s} Information", "", "", "", "", "", "", ""], :style => header_style

  sheet.add_row ["SPARC #{@protocol.class.to_s} ID:", @protocol.id], :style => [bold_default, default]
  sheet.add_row ["RMID:", @protocol.research_master_id], style: [bold_default, default]
  sheet.add_row ["Short Title:", @protocol.short_title], :style => [bold_default, default]
  sheet.add_row ["Protocol Title:", @protocol.title], :style => [bold_default, default]
  sheet.add_row ["Sponsor:", @protocol.sponsor_name], :style => [bold_default, default]
  sheet.add_row ["Primary PI Name:", @protocol.primary_principal_investigator.full_name], :style => [bold_default, default]
  sheet.add_row ["Business Manager:", @protocol.billing_managers.map(&:full_name).try(:join, ', ')], :style => [bold_default, default]
  sheet.add_row ["Funding Source:", @protocol.display_funding_source_value], :style => [bold_default, default]
  sheet.add_row ["Indirect Cost Rate:", @protocol.indirect_cost_rate || 0], style: [bold_default, percent]

  indirect_cost_rate_row = sheet.rows.length

  sheet.add_row []

  sheet.add_row ["Authorized Users", "", "", "", "", "", "", ""], style: header_style
  sheet.add_row ["Name", "Role", "Institutional Base Salary", "% Effort", "Project Period (in months)", "Salary Requested", "Fringe", "Total"]

  current_row = sheet.rows.length
  authorized_users_start_row = current_row

  @protocol.project_roles.each do |pr|
    current_row += 1
    sheet.add_row [pr.identity.full_name, PermissibleValue.get_value('user_role', pr.role), "0", "", "", "0", "0", "=SUM(F#{current_row}:G#{current_row})"], style: [default, default, money, percent, default, money, money, money]
  end

  authorized_users_end_row = current_row

  sheet.add_row []
  sheet.add_row ["Total" , "", "", "", "", "=SUM(F#{authorized_users_start_row}:F#{authorized_users_end_row})", "=SUM(G#{authorized_users_start_row}:G#{authorized_users_end_row})", "=SUM(H#{authorized_users_start_row}:H#{authorized_users_end_row})"], style: money
  total_users_cost_cell = sheet.rows.last.cells.last.r
  sheet.add_row []

  sheet.add_row ["Protocol Arms", "", "", "", "", "", "", ""], :style => header_style
  sheet.add_row ["Arm", "", "# of Subjects", "# of Visits", "", "", "", ""], :style => sub_header_style

  @protocol.arms.each do |arm|
    sheet.add_row [arm.sanitized_name, "", arm.subject_count, arm.visit_count, "", "", ""], :style => default
  end
  sheet.add_row []

  sheet.add_row ["Other Services", "", "Sponsor Unit Cost (Service Rate or Negotiated Reimbursement)", "Research Cost (Your Cost)", "Procedure Occurence (N)", "F&A Applies?", "Total Cost to Sponsor (+OH)", "Margin to Cover Personnel Effort", ""], :style => header_style
  sheet.add_row ["Study Level Services (Pass Through)", "Status", "", "", "", "", "", ""], :style => sub_header_style

  current_row = sheet.rows.length
  other_services_start_row = current_row

  ["PI Start Up", "Administrative Start Up", "IDS Annual Review"].each do |service|
    current_row += 1
    sheet.add_row [service, "", "0", "0", "1", "Y", "=IF(F#{current_row}=\"Y\",(C#{current_row}*E#{current_row})*(1+($B$#{indirect_cost_rate_row}/100)),C#{current_row}*E#{current_row})", "=(C#{current_row}-D#{current_row})*E#{current_row}"], style: [default, default, money, money, default, money, money, money]
  end

  @protocol.service_requests.each do |sr|
    sr.line_items.includes(:service).where(services: {one_time_fee: true}).each do |li|
      next if @statuses_hidden.include?(li.sub_service_request.status)
      li_row = sheet.rows.length + 1
      sheet.add_row ["#{li.service.name} (#{li.sub_service_request.ssr_id})", PermissibleValue.get_value('status', li.sub_service_request.status), "0", cents_to_dollars(li.applicable_rate), li.quantity, "Y", "=C#{li_row}*E#{li_row}", "=D#{li_row}*E#{li_row}"], :style => [default, default, money, money, default, default, money, money]
    end
  end
  sheet.add_row []
  previous_row = sheet.rows.length
  sheet.add_row ["Study Level Services: Total Cost", "", "", "", "", "", "=Sum(G#{other_services_start_row}:G#{previous_row})", "=SUM(H#{other_services_start_row}:H#{previous_row})"], :style => [row_header_style, row_header_style, bold_money, bold_money, row_header_style, bold_money, bold_money, bold_money]
  margin_to_cover_ref = "H#{previous_row+1}"
  total_cost_to_sponsor_ref = "G#{previous_row+1}"

  sheet.add_row []

  total_study_cost_cells = []
  total_margin_cost_cells = []
  total_cost_cells = []

  arm_totals_ref.keys.each do |arm|
    total_study_cost_cells << "'#{arm.to_s}'!" + arm_totals_ref[arm][:total_sponsor_per_visit]
    total_margin_cost_cells << "'#{arm.to_s}'!" + arm_totals_ref[arm][:total_margin_ppv]
    total_cost_cells << "'#{arm.to_s}'!#{arm_totals_ref[arm][:total_sponsor_ppv]}*'#{arm.to_s}'!#{arm_totals_ref[arm][:subject_count]}"
  end

  total_study_cost = @protocol.arms.any? ? "=#{total_cost_to_sponsor_ref}+#{total_study_cost_cells.join('+')}" : "=#{total_cost_to_sponsor_ref}"
  total_margin = @protocol.arms.any? ? "=#{margin_to_cover_ref}+#{total_margin_cost_cells.join('+')}" : "=#{margin_to_cover_ref}"
  breakeven_analysis = @protocol.arms.any? ? "=ROUND((#{total_users_cost_cell}-#{margin_to_cover_ref})/(#{total_margin_cost_cells.join('+')}),0)" : "=ROUND(#{total_users_cost_cell}-#{margin_to_cover_ref}, 0)"
  total_budget = @protocol.arms.any? ? "=#{total_cost_to_sponsor_ref}+#{total_cost_cells.join("+")}" : "=#{total_cost_to_sponsor_ref}"

  sheet.add_row ["Study Budget", "", "", "", "", "", "", ""], :style => header_style
  sheet.add_row ["Total Study Cost (Sponsor Cost)", total_study_cost], :style => [default, money]
  sheet.add_row ["Total Margin", total_margin], :style => [default, money]
  margin_cell = sheet.rows.last.cells.last.r
  sheet.add_row ["Study Contingency", "=#{margin_cell}-#{total_users_cost_cell}"], :style => [default, money]

  sheet.add_row ["Breakeven Analysis", breakeven_analysis]

  sheet.add_row ["Total Budget", total_budget], :style => [row_header_style, money]

  sheet.column_widths 40, 40, 15, 18, 25, 25, 25, 25
end
